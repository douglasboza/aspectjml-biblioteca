import view.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utils.BdCliente;
import utils.BdMulta;
import model.Cliente;
import model.Multa;
import java.util.Map;


privileged aspect AspectJMLRac_view_JFMulta5de1fb0d_6163_474f_bad2_4d62ec5e9525 {

 declare precedence: AspectJMLRac_*, *;



























  /** Generated by AspectJML to check the exceptional postcondition of
   * method JFMulta. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     execution(view.JFMulta.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFMulta.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.<init> regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFMulta.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method initComponents. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.initComponents())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.initComponents\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.initComponents regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBNovoActionPerformed. */
  after (final view.JFMulta object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.jBNovoActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.jBNovoActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.jBNovoActionPerformed regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBRegistrarActionPerformed. */
  after (final view.JFMulta object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.jBRegistrarActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBRegistrarActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.jBRegistrarActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.jBRegistrarActionPerformed regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBRegistrarActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBPesquisarActionPerformed. */
  after (final view.JFMulta object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.jBPesquisarActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.jBPesquisarActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.jBPesquisarActionPerformed regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jTableMultaMouseClicked. */
  after (final view.JFMulta object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.jTableMultaMouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableMultaMouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.jTableMultaMouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.jTableMultaMouseClicked regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableMultaMouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBExcluirActionPerformed. */
  after (final view.JFMulta object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.jBExcluirActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.jBExcluirActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.jBExcluirActionPerformed regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jTableClienteMouseClicked. */
  after (final view.JFMulta object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.jTableClienteMouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableClienteMouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.jTableClienteMouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.jTableClienteMouseClicked regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableClienteMouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBPagarMouseClicked. */
  after (final view.JFMulta object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.jBPagarMouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPagarMouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.jBPagarMouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.jBPagarMouseClicked regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPagarMouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method formWindowClosed. */
  after (final view.JFMulta object$rac, final java.awt.event.WindowEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.formWindowClosed(java.awt.event.WindowEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.formWindowClosed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.formWindowClosed regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBSairActionPerformed. */
  after (final view.JFMulta object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.jBSairActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.jBSairActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.jBSairActionPerformed regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method cadastraRegistro. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.cadastraRegistro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cadastraRegistro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.cadastraRegistro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.cadastraRegistro regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cadastraRegistro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method verificaDados. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(boolean view.JFMulta.verificaDados())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDados()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.verificaDados\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.verificaDados regarding code at \nFile \"view.JFMulta.java\", line 478 (view.JFMulta.java:478)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDados()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method listaContatosCliente. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.listaContatosCliente())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatosCliente()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.listaContatosCliente regarding specifications at \nline 494, character 12 (view.JFMulta.java:494)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.listaContatosCliente regarding specifications at \nline 494, character 12 (view.JFMulta.java:494)"+", and \n"+"by method view.JFMulta.listaContatosCliente regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatosCliente()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method mostraPesquisaCliente. */
  after (final view.JFMulta object$rac, final java.util.List clientes) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.mostraPesquisaCliente(java.util.List))) && this(object$rac) && args(clientes) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaCliente(java.util.List)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.mostraPesquisaCliente\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.mostraPesquisaCliente regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaCliente(java.util.List)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method limpaTabelaCliente. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.limpaTabelaCliente())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaTabelaCliente()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.limpaTabelaCliente\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.limpaTabelaCliente regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaTabelaCliente()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method listaContatosMulta. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.listaContatosMulta())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatosMulta()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.listaContatosMulta regarding specifications at \nline 539, character 12 (view.JFMulta.java:539)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.listaContatosMulta regarding specifications at \nline 539, character 12 (view.JFMulta.java:539)"+", and \n"+"by method view.JFMulta.listaContatosMulta regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatosMulta()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method mostraPesquisaMulta. */
  after (final view.JFMulta object$rac, final java.util.List multas) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.mostraPesquisaMulta(java.util.List))) && this(object$rac) && args(multas) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaMulta(java.util.List)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.mostraPesquisaMulta regarding specifications at \nline 549, character 12 (view.JFMulta.java:549)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.mostraPesquisaMulta regarding specifications at \nline 549, character 12 (view.JFMulta.java:549)"+", and \n"+"by method view.JFMulta.mostraPesquisaMulta regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaMulta(java.util.List)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method limpaTabelaMulta. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.limpaTabelaMulta())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaTabelaMulta()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.limpaTabelaMulta\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.limpaTabelaMulta regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaTabelaMulta()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method pegaIdMulta. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(int view.JFMulta.pegaIdMulta())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaIdMulta()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.pegaIdMulta\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.pegaIdMulta regarding code at \nFile \"view.JFMulta.java\", line 594 (view.JFMulta.java:594)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaIdMulta()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method pegaIdCliente. */
  after (final view.JFMulta object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String view.JFMulta.pegaIdCliente())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method view.JFMulta.pegaIdCliente regarding code at \nFile \"view.JFMulta.java\", line 605 (view.JFMulta.java:605)";
         evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaIdCliente()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method pegaIdCliente. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String view.JFMulta.pegaIdCliente())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaIdCliente()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.pegaIdCliente\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.pegaIdCliente regarding code at \nFile \"view.JFMulta.java\", line 605 (view.JFMulta.java:605)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaIdCliente()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method excluirRegistro. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.excluirRegistro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".excluirRegistro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.excluirRegistro regarding specifications at \nline 616, character 12 (view.JFMulta.java:616)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.excluirRegistro regarding specifications at \nline 616, character 12 (view.JFMulta.java:616)"+", and \n"+"by method view.JFMulta.excluirRegistro regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".excluirRegistro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method pagarMulta. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.pagarMulta())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pagarMulta()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.pagarMulta regarding specifications at \nline 647, character 12 (view.JFMulta.java:647)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.pagarMulta regarding specifications at \nline 647, character 12 (view.JFMulta.java:647)"+", and \n"+"by method view.JFMulta.pagarMulta regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pagarMulta()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method limpaCampos. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.limpaCampos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaCampos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.limpaCampos\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.limpaCampos regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaCampos()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method desabilitaCampos. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.desabilitaCampos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".desabilitaCampos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.desabilitaCampos\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.desabilitaCampos regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".desabilitaCampos()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method habilitaCampos. */
  after (final view.JFMulta object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.habilitaCampos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".habilitaCampos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.habilitaCampos\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.habilitaCampos regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".habilitaCampos()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method recebe. */
  after (final view.JFMulta object$rac, final java.lang.String valor, final java.lang.String id) throwing (Throwable rac$e) :
     (execution(void view.JFMulta.recebe(java.lang.String, java.lang.String))) && this(object$rac) && args(valor, id) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".recebe(java.lang.String, java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.recebe\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.recebe regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".recebe(java.lang.String, java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method main. */
   after (final java.lang.String[] args) throwing (Throwable rac$e) :
     execution(static void view.JFMulta.main(java.lang.String[])) && args(args) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFMulta.main(java.lang.String[])");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFMulta.java\" by method view.JFMulta.main\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFMulta.main regarding code at \nFile \"view.JFMulta.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFMulta.main(java.lang.String[])", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method jBNovoActionPerformed. */
  before (final view.JFMulta object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFMulta.jBNovoActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFMulta.jBNovoActionPerformed regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBRegistrarActionPerformed. */
  before (final view.JFMulta object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFMulta.jBRegistrarActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFMulta.jBRegistrarActionPerformed regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBRegistrarActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBPesquisarActionPerformed. */
  before (final view.JFMulta object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFMulta.jBPesquisarActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFMulta.jBPesquisarActionPerformed regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jTableMultaMouseClicked. */
  before (final view.JFMulta object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void view.JFMulta.jTableMultaMouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFMulta.jTableMultaMouseClicked regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableMultaMouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBExcluirActionPerformed. */
  before (final view.JFMulta object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFMulta.jBExcluirActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFMulta.jBExcluirActionPerformed regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jTableClienteMouseClicked. */
  before (final view.JFMulta object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void view.JFMulta.jTableClienteMouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFMulta.jTableClienteMouseClicked regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableClienteMouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBPagarMouseClicked. */
  before (final view.JFMulta object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void view.JFMulta.jBPagarMouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFMulta.jBPagarMouseClicked regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPagarMouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method formWindowClosed. */
  before (final view.JFMulta object$rac, final java.awt.event.WindowEvent evt) :
     (execution(void view.JFMulta.formWindowClosed(java.awt.event.WindowEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFMulta.formWindowClosed regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBSairActionPerformed. */
  before (final view.JFMulta object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFMulta.jBSairActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFMulta.jBSairActionPerformed regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method mostraPesquisaCliente. */
  before (final view.JFMulta object$rac, final java.util.List clientes) :
     (execution(void view.JFMulta.mostraPesquisaCliente(java.util.List))) && 
     this(object$rac) && args(clientes) {
       String preErrorMsg = "by method view.JFMulta.mostraPesquisaCliente regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'clientes\' is "+clientes+ ", when \n"+"\t\'clientes\' is "+clientes;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (clientes != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaCliente(java.util.List)");

     }

  /** Generated by AspectJML to check the precondition of
   * method mostraPesquisaMulta. */
  before (final view.JFMulta object$rac, final java.util.List multas) :
     (execution(void view.JFMulta.mostraPesquisaMulta(java.util.List))) && 
     this(object$rac) && args(multas) {
       String preErrorMsg = "by method view.JFMulta.mostraPesquisaMulta regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'multas\' is "+multas+ ", when \n"+"\t\'multas\' is "+multas;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (multas != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaMulta(java.util.List)");

     }

  /** Generated by AspectJML to check the precondition of
   * method recebe. */
  before (final view.JFMulta object$rac, final java.lang.String valor, final java.lang.String id) :
     (execution(void view.JFMulta.recebe(java.lang.String, java.lang.String))) && 
     this(object$rac) && args(valor, id) {
       String preErrorMsg = "by method view.JFMulta.recebe regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'valor\' is "+valor+"\n\t\'id\' is "+id+ ", when \n"+"\t\'valor\' is "+valor+"\n\t\'id\' is "+id;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((valor != null) && (id != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".recebe(java.lang.String, java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method main. */
  before (final java.lang.String[] args) :
     execution(static void view.JFMulta.main(java.lang.String[])) && args(args) {
       String preErrorMsg = "by method view.JFMulta.main regarding code at \nFile \"view.JFMulta.java\""+", when \n"+"\t\'args\' is "+args+ ", when \n"+"\t\'args\' is "+args;
       String evalErrorMsg = "Invalid expression in \"view.JFMulta.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (args != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "view.JFMulta.main(java.lang.String[])");

     }



  /** Generated by AspectJML to recover checked exceptions. *
    *  This is based on the exception introduction pattern by Laddad. */
    after(final view.JFMulta object$rac) throwing(JMLInternalRuntimeException rac$e)
      throws java.sql.SQLException : (execution(* view.JFMulta..*+.*(..) throws java.sql.SQLException) ||
      execution(view.JFMulta..*+.new(..) throws java.sql.SQLException) ||
  execution(* view.JFMulta+.*(..) throws java.sql.SQLException) ||
      execution(view.JFMulta+.new(..) throws java.sql.SQLException)) && 
     target(object$rac) {
      Throwable cause = rac$e.getCause();
      if(cause instanceof java.sql.SQLException) {
        throw (java.sql.SQLException)cause;
      }
      JMLChecker.rethrowUncheckedException(cause);
    }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final view.JFMulta object$rac): (execution( * view.JFMulta..*+.*(..))
            || execution(view.JFMulta..*+.new(..))
            || execution( * view.JFMulta+.*(..))
            || execution(view.JFMulta+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * view.JFMulta..*+.*(..))
            || execution(view.JFMulta..*+.new(..))
            || execution( * view.JFMulta+.*(..))
            || execution(view.JFMulta+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_JFMulta{
    before(): (execution( * view.JFMulta..*+.*(..))
            || execution(view.JFMulta..*+.new(..))
            || execution( * view.JFMulta+.*(..))
            || execution(view.JFMulta+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
