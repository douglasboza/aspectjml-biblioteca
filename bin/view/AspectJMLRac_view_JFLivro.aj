import view.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Livro;
import utils.BdLivro;
import java.util.Map;


privileged aspect AspectJMLRac_view_JFLivrob0ac2719_9aab_4b0e_905b_1b767874477b {

 declare precedence: AspectJMLRac_*, *;




















  /** Generated by AspectJML to check the exceptional postcondition of
   * method JFLivro. */
  after (final view.JFLivro object$rac) throwing (Throwable rac$e) :
     execution(view.JFLivro.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFLivro.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.<init> regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFLivro.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method JFLivro. */
  after (final view.JFLivro object$rac, final view.JFPrincipal telaPrincipal) throwing (Throwable rac$e) :
     execution(view.JFLivro.new( view.JFPrincipal )) && this(object$rac) && args(telaPrincipal) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFLivro.<init>(view.JFPrincipal)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.<init> regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFLivro.<init>(view.JFPrincipal)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method initComponents. */
  after (final view.JFLivro object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.initComponents())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.initComponents\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.initComponents regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBNovoActionPerformed. */
  after (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.jBNovoActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.jBNovoActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.jBNovoActionPerformed regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBCadastrarActionPerformed. */
  after (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.jBCadastrarActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBCadastrarActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.jBCadastrarActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.jBCadastrarActionPerformed regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBCadastrarActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBPesquisarActionPerformed. */
  after (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.jBPesquisarActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.jBPesquisarActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.jBPesquisarActionPerformed regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jTablePesquisaMouseClicked. */
  after (final view.JFLivro object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.jTablePesquisaMouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTablePesquisaMouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.jTablePesquisaMouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.jTablePesquisaMouseClicked regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTablePesquisaMouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBExcluirActionPerformed. */
  after (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.jBExcluirActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.jBExcluirActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.jBExcluirActionPerformed regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBAlterarActionPerformed. */
  after (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.jBAlterarActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBAlterarActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.jBAlterarActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.jBAlterarActionPerformed regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBAlterarActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method formWindowClosed. */
  after (final view.JFLivro object$rac, final java.awt.event.WindowEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.formWindowClosed(java.awt.event.WindowEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.formWindowClosed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.formWindowClosed regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBSairActionPerformed. */
  after (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.jBSairActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.jBSairActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.jBSairActionPerformed regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method listaContatos. */
  after (final view.JFLivro object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.listaContatos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.listaContatos regarding specifications at \nline 430, character 12 (view.JFLivro.java:430)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.listaContatos regarding specifications at \nline 430, character 12 (view.JFLivro.java:430)"+", and \n"+"by method view.JFLivro.listaContatos regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatos()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method mostraPesquisa. */
  after (final view.JFLivro object$rac, final java.util.List livros) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.mostraPesquisa(java.util.List))) && this(object$rac) && args(livros) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisa(java.util.List)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.mostraPesquisa\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.mostraPesquisa regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisa(java.util.List)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method limparTabela. */
  after (final view.JFLivro object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.limparTabela())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limparTabela()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.limparTabela\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.limparTabela regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limparTabela()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method excluirRegistro. */
  after (final view.JFLivro object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.excluirRegistro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".excluirRegistro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.excluirRegistro regarding specifications at \nline 469, character 12 (view.JFLivro.java:469)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.excluirRegistro regarding specifications at \nline 469, character 12 (view.JFLivro.java:469)"+", and \n"+"by method view.JFLivro.excluirRegistro regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".excluirRegistro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method limpaCampos. */
  after (final view.JFLivro object$rac) returning () :
     (execution(void view.JFLivro.limpaCampos())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method view.JFLivro.limpaCampos regarding specifications at \nFile \"view.JFLivro.java\", line 536, character 47 (view.JFLivro.java:536), and \nby method view.JFLivro.limpaCampos regarding code at \nFile \"view.JFLivro.java\"";
         evalErrorMsg = "Invalid expression in \"view.JFLivro.java\" by method view.JFLivro.limpaCampos regarding specifications at \nline 536, character 47 (view.JFLivro.java:536)\nCaused by: ";
       if (true){
         try {
           rac$b = ((((object$rac.jT0Id.getText().equals(((java.lang.Object) (""))) & object$rac.jT1Exemplar.getText().equals(((java.lang.Object) ("")))) & object$rac.jT2Autor.getText().equals(((java.lang.Object) ("")))) & object$rac.jT3Edicao.getText().equals(((java.lang.Object) ("")))) & object$rac.jT4Ano.getText().equals(((java.lang.Object) (""))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaCampos()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method limpaCampos. */
  after (final view.JFLivro object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.limpaCampos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaCampos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.limpaCampos\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.limpaCampos regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaCampos()", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method desabilitaCampos. */
  after (final view.JFLivro object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.desabilitaCampos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".desabilitaCampos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.desabilitaCampos\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.desabilitaCampos regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".desabilitaCampos()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method habilitaCampos. */
  after (final view.JFLivro object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFLivro.habilitaCampos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".habilitaCampos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.habilitaCampos\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.habilitaCampos regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".habilitaCampos()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method main. */
   after (final java.lang.String[] args) throwing (Throwable rac$e) :
     execution(static void view.JFLivro.main(java.lang.String[])) && args(args) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFLivro.main(java.lang.String[])");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.main\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.main regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFLivro.main(java.lang.String[])", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class JFLivro. */
  before (final view.JFLivro object$rac) :
     (execution(!static * view.JFLivro+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"JFLivro.java\"> regarding code at \nFile \"JFLivro.java\"\nnon_null for field 'teste_livro' <File \"view.JFLivro.java\", line 496, character 24 (view.JFLivro.java:496)>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"JFLivro.java\"> regarding code at \nFile \"JFLivro.java\"\nnon_null for field 'teste_livro' <File \"view.JFLivro.java\", line 496, character 24 (view.JFLivro.java:496)>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.teste_livro != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }

  /** Generated by AspectJML to check the precondition of
   * method JFLivro. */
  before (final view.JFLivro object$rac, final view.JFPrincipal telaPrincipal) :
     execution(view.JFLivro.new( view.JFPrincipal )) && 
     this(object$rac) && args(telaPrincipal) {
       String preErrorMsg = "by method view.JFLivro.<init> regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'telaPrincipal\' is "+telaPrincipal+ ", when \n"+"\t\'telaPrincipal\' is "+telaPrincipal;
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (telaPrincipal != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "view.JFLivro.<init>(view.JFPrincipal)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBNovoActionPerformed. */
  before (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFLivro.jBNovoActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFLivro.jBNovoActionPerformed regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBCadastrarActionPerformed. */
  before (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFLivro.jBCadastrarActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFLivro.jBCadastrarActionPerformed regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBCadastrarActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBPesquisarActionPerformed. */
  before (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFLivro.jBPesquisarActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFLivro.jBPesquisarActionPerformed regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jTablePesquisaMouseClicked. */
  before (final view.JFLivro object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void view.JFLivro.jTablePesquisaMouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFLivro.jTablePesquisaMouseClicked regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTablePesquisaMouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBExcluirActionPerformed. */
  before (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFLivro.jBExcluirActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFLivro.jBExcluirActionPerformed regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBAlterarActionPerformed. */
  before (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFLivro.jBAlterarActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFLivro.jBAlterarActionPerformed regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBAlterarActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method formWindowClosed. */
  before (final view.JFLivro object$rac, final java.awt.event.WindowEvent evt) :
     (execution(void view.JFLivro.formWindowClosed(java.awt.event.WindowEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFLivro.formWindowClosed regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBSairActionPerformed. */
  before (final view.JFLivro object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFLivro.jBSairActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFLivro.jBSairActionPerformed regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method mostraPesquisa. */
  before (final view.JFLivro object$rac, final java.util.List livros) :
     (execution(void view.JFLivro.mostraPesquisa(java.util.List))) && 
     this(object$rac) && args(livros) {
       String preErrorMsg = "by method view.JFLivro.mostraPesquisa regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'livros\' is "+livros+ ", when \n"+"\t\'livros\' is "+livros;
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (livros != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisa(java.util.List)");

     }

  /** Generated by AspectJML to check the precondition of
   * method limpaCampos. */
  before (final view.JFLivro object$rac) :
     (execution(void view.JFLivro.limpaCampos())) && 
     this(object$rac) {
       String preErrorMsg = "by method view.JFLivro.limpaCampos regarding specifications at \nFile \"view.JFLivro.java\", [spec-case]: line 535, character 34 (view.JFLivro.java:535), and \nby method view.JFLivro.limpaCampos regarding code at \nFile \"view.JFLivro.java\"";
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\" by method view.JFLivro.limpaCampos regarding specifications at \n[spec-case]: line 535, character 34 (view.JFLivro.java:535)\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (true);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaCampos()");

     }

  /** Generated by AspectJML to check the precondition of
   * method main. */
  before (final java.lang.String[] args) :
     execution(static void view.JFLivro.main(java.lang.String[])) && args(args) {
       String preErrorMsg = "by method view.JFLivro.main regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'args\' is "+args+ ", when \n"+"\t\'args\' is "+args;
       String evalErrorMsg = "Invalid expression in \"view.JFLivro.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (args != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "view.JFLivro.main(java.lang.String[])");

     }


  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method cadastraRegistro. */
  void around (final view.JFLivro object$rac) :
     (execution(void view.JFLivro.cadastraRegistro()))
     && this(object$rac) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = object$rac.jT0Id.getText().equals(((java.lang.Object) ("")));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method view.JFLivro.cadastraRegistro regarding specifications at \nFile \"view.JFLivro.java\", [spec-case]: line 370, character 55 (view.JFLivro.java:370), and \n[spec-case]: line 375, character 31 (view.JFLivro.java:375), and \nby method view.JFLivro.cadastraRegistro regarding code at \nFile \"view.JFLivro.java\"";
      String evalPreErrorMsg = "Invalid expression in \"view.JFLivro.java\" by method view.JFLivro.cadastraRegistro regarding specifications at \n[spec-case]: line 370, character 55 (view.JFLivro.java:370), and \n[spec-case]: line 375, character 31 (view.JFLivro.java:375)\nCaused by: ";
      try {
        rac$b = (object$rac.jT0Id.getText().equals(((java.lang.Object) (""))) || (true));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cadastraRegistro()");
      try {
        proceed(object$rac);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method view.JFLivro.cadastraRegistro regarding specifications at \nFile \"view.JFLivro.java\", line 371, character 53 (view.JFLivro.java:371), and \nby method view.JFLivro.cadastraRegistro regarding code at \nFile \"view.JFLivro.java\"";
         evalErrorMsg = "Invalid expression in \"view.JFLivro.java\" by method view.JFLivro.cadastraRegistro regarding specifications at \nline 371, character 53 (view.JFLivro.java:371)\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = ((((object$rac.jT1Exemplar.getText().equals(((java.lang.Object) (""))) & object$rac.jT2Autor.getText().equals(((java.lang.Object) ("")))) & object$rac.jT3Edicao.getText().equals(((java.lang.Object) ("")))) & object$rac.jT4Ano.getText().equals(((java.lang.Object) ("")))) & object$rac.jT5Status.getText().equals(((java.lang.Object) (""))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cadastraRegistro()");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.cadastraRegistro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.cadastraRegistro regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cadastraRegistro()", rac$e);
  		 }
  		   }
  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.cadastraRegistro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.cadastraRegistro regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cadastraRegistro()", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cadastraRegistro()");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method verificaDados. */
  boolean around (final view.JFLivro object$rac) :
     (execution(boolean view.JFLivro.verificaDados()))
     && this(object$rac) {
      boolean rac$b = true;
      boolean rac$result = false;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = (((((!(object$rac.jT1Exemplar.getText().equals(((java.lang.Object) (""))))) && (!(object$rac.jT2Autor.getText().equals(((java.lang.Object) ("")))))) && (!(object$rac.jT3Edicao.getText().equals(((java.lang.Object) ("")))))) && (!(object$rac.jT4Ano.getText().equals(((java.lang.Object) ("")))))) && (!(object$rac.jT5Status.getText().equals(((java.lang.Object) (""))))));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method view.JFLivro.verificaDados regarding specifications at \nFile \"view.JFLivro.java\", [spec-case]: line 406, character 18 (view.JFLivro.java:406), and \nby method view.JFLivro.verificaDados regarding code at \nFile \"view.JFLivro.java\", line 425 (view.JFLivro.java:425)";
      String evalPreErrorMsg = "Invalid expression in \"view.JFLivro.java\" by method view.JFLivro.verificaDados regarding specifications at \n[spec-case]: line 406, character 18 (view.JFLivro.java:406)\nCaused by: ";
      try {
        rac$b = (((((!(object$rac.jT1Exemplar.getText().equals(((java.lang.Object) (""))))) && (!(object$rac.jT2Autor.getText().equals(((java.lang.Object) ("")))))) && (!(object$rac.jT3Edicao.getText().equals(((java.lang.Object) ("")))))) && (!(object$rac.jT4Ano.getText().equals(((java.lang.Object) ("")))))) && (!(object$rac.jT5Status.getText().equals(((java.lang.Object) (""))))));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDados()");
      try {
        rac$result = proceed(object$rac);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method view.JFLivro.verificaDados regarding specifications at \nFile \"view.JFLivro.java\", line 410, character 25 (view.JFLivro.java:410), and \nby method view.JFLivro.verificaDados regarding code at \nFile \"view.JFLivro.java\", line 425 (view.JFLivro.java:425)";
         evalErrorMsg = "Invalid expression in \"view.JFLivro.java\" by method view.JFLivro.verificaDados regarding specifications at \nline 410, character 25 (view.JFLivro.java:410)\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = (rac$result == true);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDados()");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (((((object$rac.jT1Exemplar.getText().equals(((java.lang.Object) ("")))) || (object$rac.jT2Autor.getText().equals(((java.lang.Object) (""))))) || (object$rac.jT3Edicao.getText().equals(((java.lang.Object) (""))))) || (object$rac.jT4Ano.getText().equals(((java.lang.Object) (""))))) || (object$rac.jT5Status.getText().equals(((java.lang.Object) ("")))));
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.verificaDados regarding specifications at \nline 411, character 27 (view.JFLivro.java:411)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "thrown";
  			     }
  			     else if(!rac$ErrorMsg.contains("thrown")){
  			       rac$ErrorMsg += "thrown";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.verificaDados regarding specifications at \nline 411, character 27 (view.JFLivro.java:411)"+", and \n"+"by method view.JFLivro.verificaDados regarding code at \nFile \"view.JFLivro.java\", line 425 (view.JFLivro.java:425)"+"\n\t"+rac$ErrorMsg+rac$e, "", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDados()", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDados()");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
      return rac$result;
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method alteraRegistro. */
  void around (final view.JFLivro object$rac) :
     (execution(void view.JFLivro.alteraRegistro()))
     && this(object$rac) {
      boolean rac$b = true;
      boolean rac$pre0;
      boolean rac$pre1;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = (object$rac.teste_altera_registro == true);
  		rac$pre1 = (object$rac.teste_altera_registro == false);
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method view.JFLivro.alteraRegistro regarding specifications at \nFile \"view.JFLivro.java\", [spec-case]: line 498, character 53 (view.JFLivro.java:498), and \n[spec-case]: line 501, character 61 (view.JFLivro.java:501), and \nby method view.JFLivro.alteraRegistro regarding code at \nFile \"view.JFLivro.java\""+", when \n"+"\t\'this.teste_altera_registro\' is "+object$rac.teste_altera_registro;
      String evalPreErrorMsg = "Invalid expression in \"view.JFLivro.java\" by method view.JFLivro.alteraRegistro regarding specifications at \n[spec-case]: line 498, character 53 (view.JFLivro.java:498), and \n[spec-case]: line 501, character 61 (view.JFLivro.java:501)"+", when \n"+"\t\'this.teste_altera_registro\' is "+object$rac.teste_altera_registro+"\nCaused by: ";
      try {
        rac$b = ((object$rac.teste_altera_registro == true) || (object$rac.teste_altera_registro == false));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".alteraRegistro()");
      try {
        proceed(object$rac);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method view.JFLivro.alteraRegistro regarding specifications at \nFile \"view.JFLivro.java\", line 499, character 46 (view.JFLivro.java:499), and \nby method view.JFLivro.alteraRegistro regarding code at \nFile \"view.JFLivro.java\"";
         evalErrorMsg = "Invalid expression in \"view.JFLivro.java\" by method view.JFLivro.alteraRegistro regarding specifications at \nline 499, character 46 (view.JFLivro.java:499)\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = (object$rac.teste_livro.getExemplar() == object$rac.jT1Exemplar.getText());
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".alteraRegistro()");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Throwable) {
  			   java.lang.Throwable jml$ex = (java.lang.Throwable) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.alteraRegistro regarding specifications at \nline 499, character 20 (view.JFLivro.java:499)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.alteraRegistro regarding specifications at \nline 499, character 20 (view.JFLivro.java:499)"+", and \n"+"by method view.JFLivro.alteraRegistro regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".alteraRegistro()", rac$e);
  		 }
  		   }
  		   if (rac$b && rac$pre1) {
  		     if (rac$e instanceof java.lang.Throwable) {
  			   java.lang.Throwable jml$ex = (java.lang.Throwable) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFLivro.java\" by method view.JFLivro.alteraRegistro regarding specifications at \nline 501, character 36 (view.JFLivro.java:501)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFLivro.alteraRegistro regarding specifications at \nline 501, character 36 (view.JFLivro.java:501)"+", and \n"+"by method view.JFLivro.alteraRegistro regarding code at \nFile \"view.JFLivro.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".alteraRegistro()", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".alteraRegistro()");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 if (rac$e instanceof java.sql.SQLException) {
  			   throw new JMLInternalRuntimeException((java.sql.SQLException)rac$e);
  			 }
  			 else {
  			   throw new JMLSoftException(rac$e);
  			 }
  		}
  	}

  /** Generated by AspectJML to check non-static invariants of 
   * class JFLivro. */
  after (final view.JFLivro object$rac) :
     (execution(!static * view.JFLivro+.*(..)) || 
       execution(view.JFLivro+.new(..))) && 
     !execution(void view.JFLivro.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"JFLivro.java\"> regarding code at \nFile \"JFLivro.java\"\nnon_null for field 'teste_livro' <File \"view.JFLivro.java\", line 496, character 24 (view.JFLivro.java:496)>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
         String evalErrorMsg = "Invalid expression in \"@post <File \"JFLivro.java\"> regarding code at \nFile \"JFLivro.java\"\nnon_null for field 'teste_livro' <File \"view.JFLivro.java\", line 496, character 24 (view.JFLivro.java:496)>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.teste_livro != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }

  /** Generated by AspectJML to recover checked exceptions. *
    *  This is based on the exception introduction pattern by Laddad. */
    after(final view.JFLivro object$rac) throwing(JMLInternalRuntimeException rac$e)
      throws java.sql.SQLException : (execution(* view.JFLivro..*+.*(..) throws java.sql.SQLException) ||
      execution(view.JFLivro..*+.new(..) throws java.sql.SQLException) ||
  execution(* view.JFLivro+.*(..) throws java.sql.SQLException) ||
      execution(view.JFLivro+.new(..) throws java.sql.SQLException)) && 
     target(object$rac) {
      Throwable cause = rac$e.getCause();
      if(cause instanceof java.sql.SQLException) {
        throw (java.sql.SQLException)cause;
      }
      JMLChecker.rethrowUncheckedException(cause);
    }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final view.JFLivro object$rac): (execution( * view.JFLivro..*+.*(..))
            || execution(view.JFLivro..*+.new(..))
            || execution( * view.JFLivro+.*(..))
            || execution(view.JFLivro+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * view.JFLivro..*+.*(..))
            || execution(view.JFLivro..*+.new(..))
            || execution( * view.JFLivro+.*(..))
            || execution(view.JFLivro+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_JFLivro{
    before(): (execution( * view.JFLivro..*+.*(..))
            || execution(view.JFLivro..*+.new(..))
            || execution( * view.JFLivro+.*(..))
            || execution(view.JFLivro+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
