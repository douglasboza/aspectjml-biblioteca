import view.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.Map;


privileged aspect AspectJMLRac_view_JFPrincipalfee28cf6_0d1d_483d_bc51_9e40dc7fbe59 {

 declare precedence: AspectJMLRac_*, *;








  /** Generated by AspectJML to check the exceptional postcondition of
   * method JFPrincipal. */
  after (final view.JFPrincipal object$rac) throwing (Throwable rac$e) :
     execution(view.JFPrincipal.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFPrincipal.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFPrincipal.java\" by method view.JFPrincipal.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFPrincipal.<init> regarding code at \nFile \"view.JFPrincipal.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFPrincipal.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method initComponents. */
  after (final view.JFPrincipal object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFPrincipal.initComponents())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFPrincipal.java\" by method view.JFPrincipal.initComponents\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFPrincipal.initComponents regarding code at \nFile \"view.JFPrincipal.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jMLivroActionPerformed. */
  after (final view.JFPrincipal object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFPrincipal.jMLivroActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMLivroActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFPrincipal.java\" by method view.JFPrincipal.jMLivroActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFPrincipal.jMLivroActionPerformed regarding code at \nFile \"view.JFPrincipal.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMLivroActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jMenu4MouseClicked. */
  after (final view.JFPrincipal object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFPrincipal.jMenu4MouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMenu4MouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFPrincipal.java\" by method view.JFPrincipal.jMenu4MouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFPrincipal.jMenu4MouseClicked regarding code at \nFile \"view.JFPrincipal.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMenu4MouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jMClienteActionPerformed. */
  after (final view.JFPrincipal object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFPrincipal.jMClienteActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMClienteActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFPrincipal.java\" by method view.JFPrincipal.jMClienteActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFPrincipal.jMClienteActionPerformed regarding code at \nFile \"view.JFPrincipal.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMClienteActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jMenu4ActionPerformed. */
  after (final view.JFPrincipal object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFPrincipal.jMenu4ActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMenu4ActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFPrincipal.java\" by method view.JFPrincipal.jMenu4ActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFPrincipal.jMenu4ActionPerformed regarding code at \nFile \"view.JFPrincipal.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMenu4ActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jMEmprestimoActionPerformed. */
  after (final view.JFPrincipal object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFPrincipal.jMEmprestimoActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMEmprestimoActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFPrincipal.java\" by method view.JFPrincipal.jMEmprestimoActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFPrincipal.jMEmprestimoActionPerformed regarding code at \nFile \"view.JFPrincipal.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMEmprestimoActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jMMultaActionPerformed. */
  after (final view.JFPrincipal object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFPrincipal.jMMultaActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMMultaActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFPrincipal.java\" by method view.JFPrincipal.jMMultaActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFPrincipal.jMMultaActionPerformed regarding code at \nFile \"view.JFPrincipal.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMMultaActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method main. */
   after (final java.lang.String[] args) throwing (Throwable rac$e) :
     execution(static void view.JFPrincipal.main(java.lang.String[])) && args(args) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFPrincipal.main(java.lang.String[])");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFPrincipal.java\" by method view.JFPrincipal.main\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFPrincipal.main regarding code at \nFile \"view.JFPrincipal.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFPrincipal.main(java.lang.String[])", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method jMLivroActionPerformed. */
  before (final view.JFPrincipal object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFPrincipal.jMLivroActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFPrincipal.jMLivroActionPerformed regarding code at \nFile \"view.JFPrincipal.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFPrincipal.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMLivroActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jMenu4MouseClicked. */
  before (final view.JFPrincipal object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void view.JFPrincipal.jMenu4MouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFPrincipal.jMenu4MouseClicked regarding code at \nFile \"view.JFPrincipal.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFPrincipal.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMenu4MouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jMClienteActionPerformed. */
  before (final view.JFPrincipal object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFPrincipal.jMClienteActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFPrincipal.jMClienteActionPerformed regarding code at \nFile \"view.JFPrincipal.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFPrincipal.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMClienteActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jMenu4ActionPerformed. */
  before (final view.JFPrincipal object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFPrincipal.jMenu4ActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFPrincipal.jMenu4ActionPerformed regarding code at \nFile \"view.JFPrincipal.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFPrincipal.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMenu4ActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jMEmprestimoActionPerformed. */
  before (final view.JFPrincipal object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFPrincipal.jMEmprestimoActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFPrincipal.jMEmprestimoActionPerformed regarding code at \nFile \"view.JFPrincipal.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFPrincipal.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMEmprestimoActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jMMultaActionPerformed. */
  before (final view.JFPrincipal object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFPrincipal.jMMultaActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFPrincipal.jMMultaActionPerformed regarding code at \nFile \"view.JFPrincipal.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFPrincipal.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jMMultaActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method main. */
  before (final java.lang.String[] args) :
     execution(static void view.JFPrincipal.main(java.lang.String[])) && args(args) {
       String preErrorMsg = "by method view.JFPrincipal.main regarding code at \nFile \"view.JFPrincipal.java\""+", when \n"+"\t\'args\' is "+args+ ", when \n"+"\t\'args\' is "+args;
       String evalErrorMsg = "Invalid expression in \"view.JFPrincipal.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (args != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "view.JFPrincipal.main(java.lang.String[])");

     }



  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final view.JFPrincipal object$rac): (execution( * view.JFPrincipal..*+.*(..))
            || execution(view.JFPrincipal..*+.new(..))
            || execution( * view.JFPrincipal+.*(..))
            || execution(view.JFPrincipal+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * view.JFPrincipal..*+.*(..))
            || execution(view.JFPrincipal..*+.new(..))
            || execution( * view.JFPrincipal+.*(..))
            || execution(view.JFPrincipal+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_JFPrincipal{
    before(): (execution( * view.JFPrincipal..*+.*(..))
            || execution(view.JFPrincipal..*+.new(..))
            || execution( * view.JFPrincipal+.*(..))
            || execution(view.JFPrincipal+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
