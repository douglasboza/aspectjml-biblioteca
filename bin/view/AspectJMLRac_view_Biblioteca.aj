import view.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import model.Cliente;
import model.Livro;
import utils.CriaConexao;
import java.util.Map;


privileged aspect AspectJMLRac_view_Biblioteca85908f3f_f6de_49d6_b8b3_680de0e8f34d {

 declare precedence: AspectJMLRac_*, *;

  /** Generated by AspectJML to check the exceptional postcondition of
   * method main. */
   after (final java.lang.String[] args) throwing (Throwable rac$e) :
     execution(static void view.Biblioteca.main(java.lang.String[])) && args(args) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.Biblioteca.main(java.lang.String[])");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = ((jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.text.ParseException) || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.Biblioteca.java\" by method view.Biblioteca.main regarding specifications at \nline 13, character 11 (view.Biblioteca.java:13)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.Biblioteca.main regarding specifications at \nline 13, character 11 (view.Biblioteca.java:13)"+", and \n"+"by method view.Biblioteca.main regarding code at \nFile \"view.Biblioteca.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.Biblioteca.main(java.lang.String[])", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method main. */
  before (final java.lang.String[] args) :
     execution(static void view.Biblioteca.main(java.lang.String[])) && args(args) {
       String preErrorMsg = "by method view.Biblioteca.main regarding code at \nFile \"view.Biblioteca.java\""+", when \n"+"\t\'args\' is "+args+ ", when \n"+"\t\'args\' is "+args;
       String evalErrorMsg = "Invalid expression in \"view.Biblioteca.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (args != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "view.Biblioteca.main(java.lang.String[])");

     }



  /** Generated by AspectJML to recover checked exceptions. *
    *  This is based on the exception introduction pattern by Laddad. */
    after(final view.Biblioteca object$rac) throwing(JMLInternalRuntimeException rac$e)
      throws java.sql.SQLException : (execution(* view.Biblioteca..*+.*(..) throws java.sql.SQLException) ||
      execution(view.Biblioteca..*+.new(..) throws java.sql.SQLException) ||
  execution(* view.Biblioteca+.*(..) throws java.sql.SQLException) ||
      execution(view.Biblioteca+.new(..) throws java.sql.SQLException)) && 
     target(object$rac) {
      Throwable cause = rac$e.getCause();
      if(cause instanceof java.sql.SQLException) {
        throw (java.sql.SQLException)cause;
      }
      JMLChecker.rethrowUncheckedException(cause);
    }
    after(final view.Biblioteca object$rac) throwing(JMLInternalRuntimeException rac$e)
      throws java.text.ParseException : (execution(* view.Biblioteca..*+.*(..) throws java.text.ParseException) ||
      execution(view.Biblioteca..*+.new(..) throws java.text.ParseException) ||
  execution(* view.Biblioteca+.*(..) throws java.text.ParseException) ||
      execution(view.Biblioteca+.new(..) throws java.text.ParseException)) && 
     target(object$rac) {
      Throwable cause = rac$e.getCause();
      if(cause instanceof java.text.ParseException) {
        throw (java.text.ParseException)cause;
      }
      JMLChecker.rethrowUncheckedException(cause);
    }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final view.Biblioteca object$rac): (execution( * view.Biblioteca..*+.*(..))
            || execution(view.Biblioteca..*+.new(..))
            || execution( * view.Biblioteca+.*(..))
            || execution(view.Biblioteca+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * view.Biblioteca..*+.*(..))
            || execution(view.Biblioteca..*+.new(..))
            || execution( * view.Biblioteca+.*(..))
            || execution(view.Biblioteca+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
}
