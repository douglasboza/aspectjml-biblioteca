import view.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utils.BdCliente;
import utils.BdEmprestimo;
import utils.BdLivro;
import model.Cliente;
import model.Emprestimo;
import model.Livro;
import java.util.Map;


privileged aspect AspectJMLRac_view_JFEmprestimo18428860_f8ff_4c6d_92c3_3943b79752eb {

 declare precedence: AspectJMLRac_*, *;







































  /** Generated by AspectJML to check the exceptional postcondition of
   * method JFEmprestimo. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     execution(view.JFEmprestimo.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFEmprestimo.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.<init> regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFEmprestimo.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method JFEmprestimo. */
  after (final view.JFEmprestimo object$rac, final view.JFPrincipal telaPrincipal) throwing (Throwable rac$e) :
     execution(view.JFEmprestimo.new( view.JFPrincipal )) && this(object$rac) && args(telaPrincipal) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFEmprestimo.<init>(view.JFPrincipal)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.<init> regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFEmprestimo.<init>(view.JFPrincipal)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method initComponents. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.initComponents())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.initComponents\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.initComponents regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBNovoActionPerformed. */
  after (final view.JFEmprestimo object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.jBNovoActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.jBNovoActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.jBNovoActionPerformed regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBCadastrarActionPerformed. */
  after (final view.JFEmprestimo object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.jBCadastrarActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBCadastrarActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.jBCadastrarActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.jBCadastrarActionPerformed regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBCadastrarActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBPesquisarActionPerformed. */
  after (final view.JFEmprestimo object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.jBPesquisarActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.jBPesquisarActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.jBPesquisarActionPerformed regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jTableEmprestimoMouseClicked. */
  after (final view.JFEmprestimo object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.jTableEmprestimoMouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableEmprestimoMouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.jTableEmprestimoMouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.jTableEmprestimoMouseClicked regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableEmprestimoMouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBExcluirActionPerformed. */
  after (final view.JFEmprestimo object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.jBExcluirActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.jBExcluirActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.jBExcluirActionPerformed regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jTableLivroMouseClicked. */
  after (final view.JFEmprestimo object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.jTableLivroMouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableLivroMouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.jTableLivroMouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.jTableLivroMouseClicked regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableLivroMouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jTableClienteMouseClicked. */
  after (final view.JFEmprestimo object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.jTableClienteMouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableClienteMouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.jTableClienteMouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.jTableClienteMouseClicked regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableClienteMouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBDevolverMouseClicked. */
  after (final view.JFEmprestimo object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.jBDevolverMouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBDevolverMouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.jBDevolverMouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.jBDevolverMouseClicked regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBDevolverMouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method formWindowClosed. */
  after (final view.JFEmprestimo object$rac, final java.awt.event.WindowEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.formWindowClosed(java.awt.event.WindowEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.formWindowClosed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.formWindowClosed regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBSairActionPerformed. */
  after (final view.JFEmprestimo object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.jBSairActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.jBSairActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.jBSairActionPerformed regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method cadastraRegistro. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.cadastraRegistro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cadastraRegistro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.cadastraRegistro regarding specifications at \nline 544, character 12 (view.JFEmprestimo.java:544)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.cadastraRegistro regarding specifications at \nline 544, character 12 (view.JFEmprestimo.java:544)"+", and \n"+"by method view.JFEmprestimo.cadastraRegistro regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cadastraRegistro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method verificaDados. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(boolean view.JFEmprestimo.verificaDados())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDados()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.verificaDados\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.verificaDados regarding code at \nFile \"view.JFEmprestimo.java\", line 596 (view.JFEmprestimo.java:596)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDados()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method disponibilidadeLivro. */
  after (final view.JFEmprestimo object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String view.JFEmprestimo.disponibilidadeLivro())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method view.JFEmprestimo.disponibilidadeLivro regarding code at \nFile \"view.JFEmprestimo.java\", line 605 (view.JFEmprestimo.java:605)";
         evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".disponibilidadeLivro()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method disponibilidadeLivro. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String view.JFEmprestimo.disponibilidadeLivro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".disponibilidadeLivro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.disponibilidadeLivro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.disponibilidadeLivro regarding code at \nFile \"view.JFEmprestimo.java\", line 605 (view.JFEmprestimo.java:605)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".disponibilidadeLivro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method verificaDisponibilidadeLivro. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(boolean view.JFEmprestimo.verificaDisponibilidadeLivro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDisponibilidadeLivro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.verificaDisponibilidadeLivro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.verificaDisponibilidadeLivro regarding code at \nFile \"view.JFEmprestimo.java\", line 614 (view.JFEmprestimo.java:614)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDisponibilidadeLivro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method dataEmprestimo. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.dataEmprestimo())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".dataEmprestimo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.dataEmprestimo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.dataEmprestimo regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".dataEmprestimo()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method salvaDataEmprestimo. */
  after (final view.JFEmprestimo object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String view.JFEmprestimo.salvaDataEmprestimo())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method view.JFEmprestimo.salvaDataEmprestimo regarding code at \nFile \"view.JFEmprestimo.java\", line 639 (view.JFEmprestimo.java:639)";
         evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".salvaDataEmprestimo()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method salvaDataEmprestimo. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String view.JFEmprestimo.salvaDataEmprestimo())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".salvaDataEmprestimo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.salvaDataEmprestimo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.salvaDataEmprestimo regarding code at \nFile \"view.JFEmprestimo.java\", line 639 (view.JFEmprestimo.java:639)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".salvaDataEmprestimo()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method mostraDataDevolucao. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.mostraDataDevolucao())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraDataDevolucao()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.mostraDataDevolucao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.mostraDataDevolucao regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraDataDevolucao()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method salvaDataDevolucao. */
  after (final view.JFEmprestimo object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String view.JFEmprestimo.salvaDataDevolucao())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method view.JFEmprestimo.salvaDataDevolucao regarding code at \nFile \"view.JFEmprestimo.java\", line 666 (view.JFEmprestimo.java:666)";
         evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".salvaDataDevolucao()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method salvaDataDevolucao. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String view.JFEmprestimo.salvaDataDevolucao())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".salvaDataDevolucao()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.salvaDataDevolucao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.salvaDataDevolucao regarding code at \nFile \"view.JFEmprestimo.java\", line 666 (view.JFEmprestimo.java:666)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".salvaDataDevolucao()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method pegaDataDevolucaoTabela. */
  after (final view.JFEmprestimo object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String view.JFEmprestimo.pegaDataDevolucaoTabela())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method view.JFEmprestimo.pegaDataDevolucaoTabela regarding code at \nFile \"view.JFEmprestimo.java\", line 680 (view.JFEmprestimo.java:680)";
         evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaDataDevolucaoTabela()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method pegaDataDevolucaoTabela. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String view.JFEmprestimo.pegaDataDevolucaoTabela())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaDataDevolucaoTabela()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.text.ParseException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.pegaDataDevolucaoTabela regarding specifications at \nline 669, character 11 (view.JFEmprestimo.java:669)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.pegaDataDevolucaoTabela regarding specifications at \nline 669, character 11 (view.JFEmprestimo.java:669)"+", and \n"+"by method view.JFEmprestimo.pegaDataDevolucaoTabela regarding code at \nFile \"view.JFEmprestimo.java\", line 680 (view.JFEmprestimo.java:680)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaDataDevolucaoTabela()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method diferencaData. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(long view.JFEmprestimo.diferencaData())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".diferencaData()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.text.ParseException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.diferencaData regarding specifications at \nline 683, character 12 (view.JFEmprestimo.java:683)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.diferencaData regarding specifications at \nline 683, character 12 (view.JFEmprestimo.java:683)"+", and \n"+"by method view.JFEmprestimo.diferencaData regarding code at \nFile \"view.JFEmprestimo.java\", line 694 (view.JFEmprestimo.java:694)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".diferencaData()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method listaContatosCliente. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.listaContatosCliente())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatosCliente()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.listaContatosCliente regarding specifications at \nline 711, character 12 (view.JFEmprestimo.java:711)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.listaContatosCliente regarding specifications at \nline 711, character 12 (view.JFEmprestimo.java:711)"+", and \n"+"by method view.JFEmprestimo.listaContatosCliente regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatosCliente()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method mostraPesquisaCliente. */
  after (final view.JFEmprestimo object$rac, final java.util.List clientes) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.mostraPesquisaCliente(java.util.List))) && this(object$rac) && args(clientes) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaCliente(java.util.List)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.mostraPesquisaCliente\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.mostraPesquisaCliente regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaCliente(java.util.List)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method limpaTabelaCliente. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.limpaTabelaCliente())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaTabelaCliente()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.limpaTabelaCliente\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.limpaTabelaCliente regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaTabelaCliente()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method listaContatosEmprestimo. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.listaContatosEmprestimo())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatosEmprestimo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.listaContatosEmprestimo regarding specifications at \nline 756, character 12 (view.JFEmprestimo.java:756)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.listaContatosEmprestimo regarding specifications at \nline 756, character 12 (view.JFEmprestimo.java:756)"+", and \n"+"by method view.JFEmprestimo.listaContatosEmprestimo regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatosEmprestimo()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method mostraPesquisaEmprestimo. */
  after (final view.JFEmprestimo object$rac, final java.util.List emprestimos) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.mostraPesquisaEmprestimo(java.util.List))) && this(object$rac) && args(emprestimos) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaEmprestimo(java.util.List)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.mostraPesquisaEmprestimo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.mostraPesquisaEmprestimo regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaEmprestimo(java.util.List)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method limpaTabelaEmprestimo. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.limpaTabelaEmprestimo())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaTabelaEmprestimo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.limpaTabelaEmprestimo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.limpaTabelaEmprestimo regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaTabelaEmprestimo()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method listaContatosLivro. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.listaContatosLivro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatosLivro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.listaContatosLivro regarding specifications at \nline 801, character 12 (view.JFEmprestimo.java:801)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.listaContatosLivro regarding specifications at \nline 801, character 12 (view.JFEmprestimo.java:801)"+", and \n"+"by method view.JFEmprestimo.listaContatosLivro regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatosLivro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method mostraPesquisaLivro. */
  after (final view.JFEmprestimo object$rac, final java.util.List livros) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.mostraPesquisaLivro(java.util.List))) && this(object$rac) && args(livros) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaLivro(java.util.List)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.mostraPesquisaLivro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.mostraPesquisaLivro regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaLivro(java.util.List)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method limpaTabelaLivro. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.limpaTabelaLivro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaTabelaLivro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.limpaTabelaLivro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.limpaTabelaLivro regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaTabelaLivro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method excluirRegistro. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.excluirRegistro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".excluirRegistro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.excluirRegistro regarding specifications at \nline 848, character 12 (view.JFEmprestimo.java:848)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.excluirRegistro regarding specifications at \nline 848, character 12 (view.JFEmprestimo.java:848)"+", and \n"+"by method view.JFEmprestimo.excluirRegistro regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".excluirRegistro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method alteraDisponibilidade. */
  after (final view.JFEmprestimo object$rac, final java.lang.String status) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.alteraDisponibilidade(java.lang.String))) && this(object$rac) && args(status) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".alteraDisponibilidade(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.alteraDisponibilidade regarding specifications at \nline 883, character 12 (view.JFEmprestimo.java:883)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.alteraDisponibilidade regarding specifications at \nline 883, character 12 (view.JFEmprestimo.java:883)"+", and \n"+"by method view.JFEmprestimo.alteraDisponibilidade regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".alteraDisponibilidade(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method pegaIdLivro. */
  after (final view.JFEmprestimo object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String view.JFEmprestimo.pegaIdLivro())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method view.JFEmprestimo.pegaIdLivro regarding code at \nFile \"view.JFEmprestimo.java\", line 911 (view.JFEmprestimo.java:911)";
         evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaIdLivro()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method pegaIdLivro. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String view.JFEmprestimo.pegaIdLivro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaIdLivro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.pegaIdLivro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.pegaIdLivro regarding code at \nFile \"view.JFEmprestimo.java\", line 911 (view.JFEmprestimo.java:911)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaIdLivro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method devolveLivro. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.devolveLivro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".devolveLivro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = ((jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.text.ParseException) || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.devolveLivro regarding specifications at \nline 918, character 12 (view.JFEmprestimo.java:918)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.devolveLivro regarding specifications at \nline 918, character 12 (view.JFEmprestimo.java:918)"+", and \n"+"by method view.JFEmprestimo.devolveLivro regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".devolveLivro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method limpaCamposEmprestimo. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.limpaCamposEmprestimo())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaCamposEmprestimo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.limpaCamposEmprestimo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.limpaCamposEmprestimo regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaCamposEmprestimo()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method desabilitaCamposEmprestimo. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.desabilitaCamposEmprestimo())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".desabilitaCamposEmprestimo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.desabilitaCamposEmprestimo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.desabilitaCamposEmprestimo regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".desabilitaCamposEmprestimo()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method passaValor. */
  after (final view.JFEmprestimo object$rac, final java.lang.String valor) throwing (Throwable rac$e) :
     (execution(void view.JFEmprestimo.passaValor(java.lang.String))) && this(object$rac) && args(valor) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".passaValor(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = ((jml$ex instanceof java.text.ParseException || jml$ex instanceof java.sql.SQLException) || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.passaValor regarding specifications at \nline 975, character 12 (view.JFEmprestimo.java:975)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.passaValor regarding specifications at \nline 975, character 12 (view.JFEmprestimo.java:975)"+", and \n"+"by method view.JFEmprestimo.passaValor regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".passaValor(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method pegaIdCliente. */
  after (final view.JFEmprestimo object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String view.JFEmprestimo.pegaIdCliente())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method view.JFEmprestimo.pegaIdCliente regarding code at \nFile \"view.JFEmprestimo.java\", line 988 (view.JFEmprestimo.java:988)";
         evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaIdCliente()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method pegaIdCliente. */
  after (final view.JFEmprestimo object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String view.JFEmprestimo.pegaIdCliente())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaIdCliente()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.pegaIdCliente regarding specifications at \nline 982, character 12 (view.JFEmprestimo.java:982)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.pegaIdCliente regarding specifications at \nline 982, character 12 (view.JFEmprestimo.java:982)"+", and \n"+"by method view.JFEmprestimo.pegaIdCliente regarding code at \nFile \"view.JFEmprestimo.java\", line 988 (view.JFEmprestimo.java:988)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".pegaIdCliente()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method main. */
   after (final java.lang.String[] args) throwing (Throwable rac$e) :
     execution(static void view.JFEmprestimo.main(java.lang.String[])) && args(args) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFEmprestimo.main(java.lang.String[])");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFEmprestimo.java\" by method view.JFEmprestimo.main\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFEmprestimo.main regarding code at \nFile \"view.JFEmprestimo.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFEmprestimo.main(java.lang.String[])", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method JFEmprestimo. */
  before (final view.JFEmprestimo object$rac, final view.JFPrincipal telaPrincipal) :
     execution(view.JFEmprestimo.new( view.JFPrincipal )) && 
     this(object$rac) && args(telaPrincipal) {
       String preErrorMsg = "by method view.JFEmprestimo.<init> regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'telaPrincipal\' is "+telaPrincipal+ ", when \n"+"\t\'telaPrincipal\' is "+telaPrincipal;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (telaPrincipal != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "view.JFEmprestimo.<init>(view.JFPrincipal)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBNovoActionPerformed. */
  before (final view.JFEmprestimo object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFEmprestimo.jBNovoActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFEmprestimo.jBNovoActionPerformed regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBCadastrarActionPerformed. */
  before (final view.JFEmprestimo object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFEmprestimo.jBCadastrarActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFEmprestimo.jBCadastrarActionPerformed regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBCadastrarActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBPesquisarActionPerformed. */
  before (final view.JFEmprestimo object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFEmprestimo.jBPesquisarActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFEmprestimo.jBPesquisarActionPerformed regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jTableEmprestimoMouseClicked. */
  before (final view.JFEmprestimo object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void view.JFEmprestimo.jTableEmprestimoMouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFEmprestimo.jTableEmprestimoMouseClicked regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableEmprestimoMouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBExcluirActionPerformed. */
  before (final view.JFEmprestimo object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFEmprestimo.jBExcluirActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFEmprestimo.jBExcluirActionPerformed regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jTableLivroMouseClicked. */
  before (final view.JFEmprestimo object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void view.JFEmprestimo.jTableLivroMouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFEmprestimo.jTableLivroMouseClicked regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableLivroMouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jTableClienteMouseClicked. */
  before (final view.JFEmprestimo object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void view.JFEmprestimo.jTableClienteMouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFEmprestimo.jTableClienteMouseClicked regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTableClienteMouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBDevolverMouseClicked. */
  before (final view.JFEmprestimo object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void view.JFEmprestimo.jBDevolverMouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFEmprestimo.jBDevolverMouseClicked regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBDevolverMouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method formWindowClosed. */
  before (final view.JFEmprestimo object$rac, final java.awt.event.WindowEvent evt) :
     (execution(void view.JFEmprestimo.formWindowClosed(java.awt.event.WindowEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFEmprestimo.formWindowClosed regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBSairActionPerformed. */
  before (final view.JFEmprestimo object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFEmprestimo.jBSairActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFEmprestimo.jBSairActionPerformed regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method mostraPesquisaCliente. */
  before (final view.JFEmprestimo object$rac, final java.util.List clientes) :
     (execution(void view.JFEmprestimo.mostraPesquisaCliente(java.util.List))) && 
     this(object$rac) && args(clientes) {
       String preErrorMsg = "by method view.JFEmprestimo.mostraPesquisaCliente regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'clientes\' is "+clientes+ ", when \n"+"\t\'clientes\' is "+clientes;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (clientes != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaCliente(java.util.List)");

     }

  /** Generated by AspectJML to check the precondition of
   * method mostraPesquisaEmprestimo. */
  before (final view.JFEmprestimo object$rac, final java.util.List emprestimos) :
     (execution(void view.JFEmprestimo.mostraPesquisaEmprestimo(java.util.List))) && 
     this(object$rac) && args(emprestimos) {
       String preErrorMsg = "by method view.JFEmprestimo.mostraPesquisaEmprestimo regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'emprestimos\' is "+emprestimos+ ", when \n"+"\t\'emprestimos\' is "+emprestimos;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (emprestimos != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaEmprestimo(java.util.List)");

     }

  /** Generated by AspectJML to check the precondition of
   * method mostraPesquisaLivro. */
  before (final view.JFEmprestimo object$rac, final java.util.List livros) :
     (execution(void view.JFEmprestimo.mostraPesquisaLivro(java.util.List))) && 
     this(object$rac) && args(livros) {
       String preErrorMsg = "by method view.JFEmprestimo.mostraPesquisaLivro regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'livros\' is "+livros+ ", when \n"+"\t\'livros\' is "+livros;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (livros != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisaLivro(java.util.List)");

     }

  /** Generated by AspectJML to check the precondition of
   * method alteraDisponibilidade. */
  before (final view.JFEmprestimo object$rac, final java.lang.String status) :
     (execution(void view.JFEmprestimo.alteraDisponibilidade(java.lang.String))) && 
     this(object$rac) && args(status) {
       String preErrorMsg = "by method view.JFEmprestimo.alteraDisponibilidade regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'status\' is "+status+ ", when \n"+"\t\'status\' is "+status;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (status != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".alteraDisponibilidade(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method passaValor. */
  before (final view.JFEmprestimo object$rac, final java.lang.String valor) :
     (execution(void view.JFEmprestimo.passaValor(java.lang.String))) && 
     this(object$rac) && args(valor) {
       String preErrorMsg = "by method view.JFEmprestimo.passaValor regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'valor\' is "+valor+ ", when \n"+"\t\'valor\' is "+valor;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (valor != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".passaValor(java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method main. */
  before (final java.lang.String[] args) :
     execution(static void view.JFEmprestimo.main(java.lang.String[])) && args(args) {
       String preErrorMsg = "by method view.JFEmprestimo.main regarding code at \nFile \"view.JFEmprestimo.java\""+", when \n"+"\t\'args\' is "+args+ ", when \n"+"\t\'args\' is "+args;
       String evalErrorMsg = "Invalid expression in \"view.JFEmprestimo.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (args != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "view.JFEmprestimo.main(java.lang.String[])");

     }



  /** Generated by AspectJML to recover checked exceptions. *
    *  This is based on the exception introduction pattern by Laddad. */
    after(final view.JFEmprestimo object$rac) throwing(JMLInternalRuntimeException rac$e)
      throws java.sql.SQLException : (execution(* view.JFEmprestimo..*+.*(..) throws java.sql.SQLException) ||
      execution(view.JFEmprestimo..*+.new(..) throws java.sql.SQLException) ||
  execution(* view.JFEmprestimo+.*(..) throws java.sql.SQLException) ||
      execution(view.JFEmprestimo+.new(..) throws java.sql.SQLException)) && 
     target(object$rac) {
      Throwable cause = rac$e.getCause();
      if(cause instanceof java.sql.SQLException) {
        throw (java.sql.SQLException)cause;
      }
      JMLChecker.rethrowUncheckedException(cause);
    }
    after(final view.JFEmprestimo object$rac) throwing(JMLInternalRuntimeException rac$e)
      throws java.text.ParseException : (execution(* view.JFEmprestimo..*+.*(..) throws java.text.ParseException) ||
      execution(view.JFEmprestimo..*+.new(..) throws java.text.ParseException) ||
  execution(* view.JFEmprestimo+.*(..) throws java.text.ParseException) ||
      execution(view.JFEmprestimo+.new(..) throws java.text.ParseException)) && 
     target(object$rac) {
      Throwable cause = rac$e.getCause();
      if(cause instanceof java.text.ParseException) {
        throw (java.text.ParseException)cause;
      }
      JMLChecker.rethrowUncheckedException(cause);
    }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final view.JFEmprestimo object$rac): (execution( * view.JFEmprestimo..*+.*(..))
            || execution(view.JFEmprestimo..*+.new(..))
            || execution( * view.JFEmprestimo+.*(..))
            || execution(view.JFEmprestimo+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * view.JFEmprestimo..*+.*(..))
            || execution(view.JFEmprestimo..*+.new(..))
            || execution( * view.JFEmprestimo+.*(..))
            || execution(view.JFEmprestimo+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_JFEmprestimo{
    before(): (execution( * view.JFEmprestimo..*+.*(..))
            || execution(view.JFEmprestimo..*+.new(..))
            || execution( * view.JFEmprestimo+.*(..))
            || execution(view.JFEmprestimo+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
