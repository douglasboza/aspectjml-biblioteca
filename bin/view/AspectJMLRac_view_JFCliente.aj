import view.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Cliente;
import utils.BdCliente;
import java.util.Map;


privileged aspect AspectJMLRac_view_JFCliente54510272_f64d_4b08_842b_1d53fede4972 {

 declare precedence: AspectJMLRac_*, *;





















  /** Generated by AspectJML to check the exceptional postcondition of
   * method JFCliente. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     execution(view.JFCliente.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFCliente.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.<init> regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFCliente.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method JFCliente. */
  after (final view.JFCliente object$rac, final view.JFPrincipal telaPrincipal) throwing (Throwable rac$e) :
     execution(view.JFCliente.new( view.JFPrincipal )) && this(object$rac) && args(telaPrincipal) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFCliente.<init>(view.JFPrincipal)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.<init> regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFCliente.<init>(view.JFPrincipal)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method initComponents. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.initComponents())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.initComponents\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.initComponents regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBNovoActionPerformed. */
  after (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.jBNovoActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.jBNovoActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.jBNovoActionPerformed regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBCadastrarActionPerformed. */
  after (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.jBCadastrarActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBCadastrarActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.jBCadastrarActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.jBCadastrarActionPerformed regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBCadastrarActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBPesquisarActionPerformed. */
  after (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.jBPesquisarActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.jBPesquisarActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.jBPesquisarActionPerformed regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jTablePesquisaMouseClicked. */
  after (final view.JFCliente object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.jTablePesquisaMouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTablePesquisaMouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.jTablePesquisaMouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.jTablePesquisaMouseClicked regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTablePesquisaMouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBExcluirActionPerformed. */
  after (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.jBExcluirActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.jBExcluirActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.jBExcluirActionPerformed regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBAlterarActionPerformed. */
  after (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.jBAlterarActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBAlterarActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.jBAlterarActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.jBAlterarActionPerformed regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBAlterarActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method formWindowClosed. */
  after (final view.JFCliente object$rac, final java.awt.event.WindowEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.formWindowClosed(java.awt.event.WindowEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.formWindowClosed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.formWindowClosed regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jBSairActionPerformed. */
  after (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.jBSairActionPerformed(java.awt.event.ActionEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.jBSairActionPerformed\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.jBSairActionPerformed regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method cadastraRegistro. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.cadastraRegistro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cadastraRegistro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.cadastraRegistro\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.cadastraRegistro regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cadastraRegistro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method verificaDados. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     (execution(boolean view.JFCliente.verificaDados())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDados()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.verificaDados\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.verificaDados regarding code at \nFile \"view.JFCliente.java\", line 461 (view.JFCliente.java:461)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificaDados()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method data. */
  after (final view.JFCliente object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String view.JFCliente.data())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method view.JFCliente.data regarding code at \nFile \"view.JFCliente.java\", line 468 (view.JFCliente.java:468)";
         evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".data()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method data. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String view.JFCliente.data())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".data()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.data\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.data regarding code at \nFile \"view.JFCliente.java\", line 468 (view.JFCliente.java:468)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".data()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method listaContatos. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.listaContatos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.listaContatos regarding specifications at \nline 483, character 12 (view.JFCliente.java:483)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.listaContatos regarding specifications at \nline 483, character 12 (view.JFCliente.java:483)"+", and \n"+"by method view.JFCliente.listaContatos regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".listaContatos()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method mostraPesquisa. */
  after (final view.JFCliente object$rac, final java.util.List clientes) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.mostraPesquisa(java.util.List))) && this(object$rac) && args(clientes) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisa(java.util.List)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.mostraPesquisa\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.mostraPesquisa regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisa(java.util.List)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method limparTabela. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.limparTabela())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limparTabela()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.limparTabela\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.limparTabela regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limparTabela()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method excluirRegistro. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.excluirRegistro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".excluirRegistro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.excluirRegistro regarding specifications at \nline 531, character 12 (view.JFCliente.java:531)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.excluirRegistro regarding specifications at \nline 531, character 12 (view.JFCliente.java:531)"+", and \n"+"by method view.JFCliente.excluirRegistro regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".excluirRegistro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method alteraRegistro. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.alteraRegistro())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".alteraRegistro()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$ex = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = (jml$ex instanceof java.sql.SQLException || jml$ex instanceof java.lang.RuntimeException);
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.alteraRegistro regarding specifications at \nline 565, character 12 (view.JFCliente.java:565)"+"\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.alteraRegistro regarding specifications at \nline 565, character 12 (view.JFCliente.java:565)"+", and \n"+"by method view.JFCliente.alteraRegistro regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".alteraRegistro()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method limpaCampos. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.limpaCampos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaCampos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.limpaCampos\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.limpaCampos regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".limpaCampos()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method desabilitaCampos. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.desabilitaCampos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".desabilitaCampos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.desabilitaCampos\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.desabilitaCampos regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".desabilitaCampos()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method habilitaCampos. */
  after (final view.JFCliente object$rac) throwing (Throwable rac$e) :
     (execution(void view.JFCliente.habilitaCampos())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".habilitaCampos()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.habilitaCampos\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.habilitaCampos regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".habilitaCampos()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method main. */
   after (final java.lang.String[] args) throwing (Throwable rac$e) :
     execution(static void view.JFCliente.main(java.lang.String[])) && args(args) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "view.JFCliente.main(java.lang.String[])");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"view.JFCliente.java\" by method view.JFCliente.main\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method view.JFCliente.main regarding code at \nFile \"view.JFCliente.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "view.JFCliente.main(java.lang.String[])", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method JFCliente. */
  before (final view.JFCliente object$rac, final view.JFPrincipal telaPrincipal) :
     execution(view.JFCliente.new( view.JFPrincipal )) && 
     this(object$rac) && args(telaPrincipal) {
       String preErrorMsg = "by method view.JFCliente.<init> regarding code at \nFile \"view.JFCliente.java\""+", when \n"+"\t\'telaPrincipal\' is "+telaPrincipal+ ", when \n"+"\t\'telaPrincipal\' is "+telaPrincipal;
       String evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (telaPrincipal != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "view.JFCliente.<init>(view.JFPrincipal)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBNovoActionPerformed. */
  before (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFCliente.jBNovoActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFCliente.jBNovoActionPerformed regarding code at \nFile \"view.JFCliente.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBNovoActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBCadastrarActionPerformed. */
  before (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFCliente.jBCadastrarActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFCliente.jBCadastrarActionPerformed regarding code at \nFile \"view.JFCliente.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBCadastrarActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBPesquisarActionPerformed. */
  before (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFCliente.jBPesquisarActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFCliente.jBPesquisarActionPerformed regarding code at \nFile \"view.JFCliente.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBPesquisarActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jTablePesquisaMouseClicked. */
  before (final view.JFCliente object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void view.JFCliente.jTablePesquisaMouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFCliente.jTablePesquisaMouseClicked regarding code at \nFile \"view.JFCliente.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jTablePesquisaMouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBExcluirActionPerformed. */
  before (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFCliente.jBExcluirActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFCliente.jBExcluirActionPerformed regarding code at \nFile \"view.JFCliente.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBExcluirActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBAlterarActionPerformed. */
  before (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFCliente.jBAlterarActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFCliente.jBAlterarActionPerformed regarding code at \nFile \"view.JFCliente.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBAlterarActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method formWindowClosed. */
  before (final view.JFCliente object$rac, final java.awt.event.WindowEvent evt) :
     (execution(void view.JFCliente.formWindowClosed(java.awt.event.WindowEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFCliente.formWindowClosed regarding code at \nFile \"view.JFCliente.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".formWindowClosed(java.awt.event.WindowEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jBSairActionPerformed. */
  before (final view.JFCliente object$rac, final java.awt.event.ActionEvent evt) :
     (execution(void view.JFCliente.jBSairActionPerformed(java.awt.event.ActionEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method view.JFCliente.jBSairActionPerformed regarding code at \nFile \"view.JFCliente.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jBSairActionPerformed(java.awt.event.ActionEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method mostraPesquisa. */
  before (final view.JFCliente object$rac, final java.util.List clientes) :
     (execution(void view.JFCliente.mostraPesquisa(java.util.List))) && 
     this(object$rac) && args(clientes) {
       String preErrorMsg = "by method view.JFCliente.mostraPesquisa regarding code at \nFile \"view.JFCliente.java\""+", when \n"+"\t\'clientes\' is "+clientes+ ", when \n"+"\t\'clientes\' is "+clientes;
       String evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (clientes != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".mostraPesquisa(java.util.List)");

     }

  /** Generated by AspectJML to check the precondition of
   * method main. */
  before (final java.lang.String[] args) :
     execution(static void view.JFCliente.main(java.lang.String[])) && args(args) {
       String preErrorMsg = "by method view.JFCliente.main regarding code at \nFile \"view.JFCliente.java\""+", when \n"+"\t\'args\' is "+args+ ", when \n"+"\t\'args\' is "+args;
       String evalErrorMsg = "Invalid expression in \"view.JFCliente.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (args != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "view.JFCliente.main(java.lang.String[])");

     }



  /** Generated by AspectJML to recover checked exceptions. *
    *  This is based on the exception introduction pattern by Laddad. */
    after(final view.JFCliente object$rac) throwing(JMLInternalRuntimeException rac$e)
      throws java.sql.SQLException : (execution(* view.JFCliente..*+.*(..) throws java.sql.SQLException) ||
      execution(view.JFCliente..*+.new(..) throws java.sql.SQLException) ||
  execution(* view.JFCliente+.*(..) throws java.sql.SQLException) ||
      execution(view.JFCliente+.new(..) throws java.sql.SQLException)) && 
     target(object$rac) {
      Throwable cause = rac$e.getCause();
      if(cause instanceof java.sql.SQLException) {
        throw (java.sql.SQLException)cause;
      }
      JMLChecker.rethrowUncheckedException(cause);
    }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final view.JFCliente object$rac): (execution( * view.JFCliente..*+.*(..))
            || execution(view.JFCliente..*+.new(..))
            || execution( * view.JFCliente+.*(..))
            || execution(view.JFCliente+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * view.JFCliente..*+.*(..))
            || execution(view.JFCliente..*+.new(..))
            || execution( * view.JFCliente+.*(..))
            || execution(view.JFCliente+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_JFCliente{
    before(): (execution( * view.JFCliente..*+.*(..))
            || execution(view.JFCliente..*+.new(..))
            || execution( * view.JFCliente+.*(..))
            || execution(view.JFCliente+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
